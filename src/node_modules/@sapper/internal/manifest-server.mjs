// This file is generated by Sapper â€” do not edit it!
import * as route_0 from "../../../routes/[lang]/dev/md/ipv4-calc.md";
import * as route_1 from "../../../routes/[lang]/dev/md/ahk.md";
import * as route_2 from "../../../routes/[lang]/dev/md/log.md";
import * as route_3 from "../../../routes/[lang]/dev/md.js";
import component_0 from "../../../routes/index.svelte";
import component_1 from "../../../routes/zrada.svelte";
import component_2 from "../../../routes/[lang]/_layout.svelte";
import component_3 from "../../../routes/[lang]/index.svelte";
import component_4 from "../../../routes/[lang]/dev/save-the-princess.svelte";
import component_5, { preload as preload_5 } from "../../../routes/[lang]/dev/[slug].svelte";
import root from "./layout.svelte";
import error from "../../../routes/_error.svelte";

const d = decodeURIComponent;

export const manifest = {
	server_routes: [
		{
			// [lang]/dev/md/ipv4-calc.md
			pattern: /^\/([^\/]+?)\/dev\/md\/ipv4-calc\/?$/,
			handlers: route_0,
			params: match => ({ lang: d(match[1]) })
		},

		{
			// [lang]/dev/md/ahk.md
			pattern: /^\/([^\/]+?)\/dev\/md\/ahk\/?$/,
			handlers: route_1,
			params: match => ({ lang: d(match[1]) })
		},

		{
			// [lang]/dev/md/log.md
			pattern: /^\/([^\/]+?)\/dev\/md\/log\/?$/,
			handlers: route_2,
			params: match => ({ lang: d(match[1]) })
		},

		{
			// [lang]/dev/md.js
			pattern: /^\/([^\/]+?)\/dev\/md\/?$/,
			handlers: route_3,
			params: match => ({ lang: d(match[1]) })
		}
	],

	pages: [
		{
			// index.svelte
			pattern: /^\/$/,
			parts: [
				{ name: "index", file: "index.svelte", component: component_0 }
			]
		},

		{
			// zrada.svelte
			pattern: /^\/zrada\/?$/,
			parts: [
				{ name: "zrada", file: "zrada.svelte", component: component_1 }
			]
		},

		{
			// [lang]/index.svelte
			pattern: /^\/([^\/]+?)\/?$/,
			parts: [
				{ name: "$lang__layout", file: "[lang]/_layout.svelte", component: component_2, params: match => ({ lang: d(match[1]) }) },
				{ name: "$lang", file: "[lang]/index.svelte", component: component_3, params: match => ({ lang: d(match[1]) }) }
			]
		},

		{
			// [lang]/dev/save-the-princess.svelte
			pattern: /^\/([^\/]+?)\/dev\/save-the-princess\/?$/,
			parts: [
				{ name: "$lang__layout", file: "[lang]/_layout.svelte", component: component_2, params: match => ({ lang: d(match[1]) }) },
				null,
				{ name: "$lang_dev_save$45the$45princess", file: "[lang]/dev/save-the-princess.svelte", component: component_4, params: match => ({ lang: d(match[1]) }) }
			]
		},

		{
			// [lang]/dev/[slug].svelte
			pattern: /^\/([^\/]+?)\/dev\/([^\/]+?)\/?$/,
			parts: [
				{ name: "$lang__layout", file: "[lang]/_layout.svelte", component: component_2, params: match => ({ lang: d(match[1]) }) },
				null,
				{ name: "$lang$93_dev_$91slug", file: "[lang]/dev/[slug].svelte", component: component_5, preload: preload_5, params: match => ({ lang: d(match[1]), slug: d(match[2]) }) }
			]
		}
	],

	root,
	root_preload: () => {},
	error
};

export const build_dir = "__sapper__/dev";

export const src_dir = "src";

export const dev = true;